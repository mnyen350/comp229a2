#!/usr/bin/env node

/**
 * Module dependencies.
 */

const mongo = require('../mongo');
const app = require('../app');
const http = require('http');
const fs = require('fs');
const config = {
  port: 3000,
  connection: ''
};

if (fs.existsSync('./config.json')) {
  Object.assign(config, JSON.parse(fs.readFileSync('./config.json')));
  if (!config.connection) {
    console.error('please update config.json with the database connection string');
    return;
  }
}
else {
   fs.writeFileSync('./config.json', JSON.stringify(config, null, 2));
   console.error('config.json does not exist, a blank config.json has been created.');
   return;
}


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
mongo
.start(config.connection)
.connection
.on('connected', () => {
    console.log('Connected to database, starting server...');
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
.on('error', (err) => {
  console.log('Unable to connect to database: ', err);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
